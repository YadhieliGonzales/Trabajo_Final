#Importamos las librer√≠as a utilizar
import pandas as pd #Ya mencionado anteriormente, permite manipular y manejar los datos de un DataFrame.
import streamlit as st
import numpy as np #ofrece herramientas que manejan datos n√∫mericos
import function as fl 

#PASO 01
#Cargamos la base de datos de pel√≠culas
#Lo cargamos como un DataFrame para acceder a √©l, el formato CSV almacena grandes cantidades de datos y Pandas permite acceder a √©l.
df = pd.read_csv("Peliculas.csv")

#PASO 02 - Funci√≥n para filtrar pel√≠culas
#Esta funci√≥n toma los aspectos como a√±os, g√©neros, idioma y ubicaci√≥n para filtrar las pel√≠culas
#Mediante las condicionales se busca tener una filtraci√≥n que nos arroje informaci√≥n 'separada'
def lista_pel√≠culas(a√±o_inicio, a√±o_fin, G√©nero, Idioma, Locaci√≥n):
    # Filtrar por a√±o para obtener las pel√≠culas que solo est√©n dentro del rango establecido. Esto mediante las condicionales
    if a√±o_inicio and a√±o_fin:
        filtered_df = df[(df['A√±o'] >= a√±o_inicio) & (df['A√±o'] <= a√±o_fin)] #si no se especifica rango, se mantiene junto
    else:
        filtered_df = df

    # Filtrar por g√©nero para obtener solo las pel√≠culas que perteneces y son escogidas
    if G√©nero:
        filtered_df = filtered_df[filtered_df['G√©nero'].isin(G√©nero)]

    # Filtrar por idioma (similar a las anteriores)
    if Idioma:
        filtered_df = filtered_df[filtered_df['Idioma'].isin(Idioma)]

    # Filtrar por locaciones (similar a las anteriores)
    if Locaci√≥n:
        filtered_df = filtered_df[filtered_df['Locaci√≥n'].isin(Locaci√≥n)]

    # Devolver la lista de t√≠tulos de pel√≠culas recomendadas
    return filtered_df['T√≠tulo'].tolist()

#Agregamos el t√≠tulo y lo centramos
st.markdown("<h1 style='text-align: center; color: #FF5733;'>Buscador de Pel√≠culas</h1>", unsafe_allow_html=True)


#PASO 03 - Filtros para la selecci√≥n de pel√≠culas
row1 = st.columns((1, 1, 1), gap='small', vertical_alignment='top')
#Aqu√≠ usamos el st.colums para organizar los widgtes en columnas (son 3)
#with permitir√° que se hagan operaciones despu√©s de que un c√≥digo ha sido ejecutado :D
with row1[0]:
    G√©nero = st.multiselect( #el multiselect permite seleccionar uno o m√°s de dos g√©neros en una pel√≠cula
        'G√©nero:',
        options=df['G√©nero'].unique(),
        default=['Comedia']
    )  
with row1[1]:
    Idioma = st.multiselect(
        'Idioma:',
        options=df['Idioma'].unique(),
        default=['Espa√±ol']
    )  
with row1[2]: #Aqu√≠ creamos dos columnas m√°s peque√±as para el bot√≥n de la selecci√≥n del a√±o
    Locaci√≥n = st.multiselect(
        'Locaci√≥n:',
        options=df['Locaci√≥n'].unique(),
        default=['Lima']
    )  

row2 = st.columns((0.3, 0.7), gap='small', vertical_alignment='top')

with row2[0]:
    on = st.toggle(" :orange[Desactivar selecci√≥n de rango]") #este permitir√° activar la opci√≥n del rango de a√±os. Si est√° desactivado el usuario podr√° elegir un solo a√±o, sino, seguir√° en rango.
with row2[1]:
    with st.container(border=True):
        A√±o = df['A√±o'].unique()
        dia = 0
        if on:
            st.write(":green[Activado]") 
            dia = st.select_slider(
                "Seleccionar un a√±o",
                options=A√±o,
                value=2016
            )
        else:
            inicio_dia, fin_dia = st.select_slider(
                "Seleccionar un rango de a√±os",
                options=A√±o,
                value=(2000, 2024)
            )
            
    if on:
        st.write(f"Seleccionaste: :green[{dia}]") 
    else:
        st.write(f"Seleccionaste: :green[{inicio_dia}] - :green[{fin_dia}]")  

row3 = st.columns(1)

if dia:
    resultado_peliculas = lista_pel√≠culas(dia, dia, G√©nero, Idioma, Locaci√≥n)
else:
    resultado_peliculas = lista_pel√≠culas(inicio_dia, fin_dia, G√©nero, Idioma, Locaci√≥n)

# PASO 04 - Resultados de los filtros
st.title(":rainbow[üé• Pel√≠culas]")

if resultado_peliculas:
    # Dividimos en 3 columnas para mostrar las pel√≠culas de manera atractiva
    pelicula_columna = st.columns(3)  
    for i, pelicula in enumerate(resultado_peliculas):
        with pelicula_columna[i % 3]:
            # Buscar la informaci√≥n de la pel√≠cula
            pelicula_info = df[df['T√≠tulo'] == pelicula].iloc[0]
            
            # Creamos un contenedor para cada pel√≠cula, esto para que sea visualmente atractivo
            with st.expander(f"{pelicula_info['T√≠tulo']}"):
                # Mostrar la portada de la pel√≠cula
                st.image(
                    pelicula_info['Portada Imagen'], 
                    caption=pelicula_info['T√≠tulo'], 
                    use_container_width=True
                )
                
                # Mostrar el enlace al tr√°iler con bot√≥n personalizado
                st.markdown(f"""
                    <div style="text-align: center;">
                        <a href="{pelicula_info['Trailer']}" target="_blank">
                            <button style="
                                background-color: #EFEFEF; 
                                color: black; 
                                padding: 10px 20px; 
                                border-radius: 5px; 
                                border: none; 
                                font-size: 16px; 
                                cursor: pointer;">
                                üìÄ Ver Tr√°iler
                            </button>
                        </a>
                    </div>
                """, unsafe_allow_html=True)
else:
    st.info("No se encontraron pel√≠culas que coincidan con los criterios.")