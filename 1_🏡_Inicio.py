#Primero, agregamos el folder al terminal de la computadora
#Segundo, instalamos un entorno virtual en tu computadora -- python -m venv .venv
#Tercero, instalamos Streamlit y las librer√≠as a utilizar en nuestro entorno virtual.
#pip install Streamlit - pip install streamlit pandas (para la base de datos) y plotly
#Cuarto, puedes abrir el tutorial de Streamlit en tu navegador.
#streamlit hello o python -m streamlit hello
#Quinto, ejecutamos en la terminal streamlit run 1_üè°_Inicio.py o python -m streamlit run your_script.py

#----------------------------------------------------------------------------------------------------------------------------------
# Importamos las librer√≠as necesarias
import streamlit as st #Usada para crear el interfaz en donde podremos hacer la p√°gina
import pandas as pd #Utilizada para la manipulaci√≥n y an√°lisis de datos, se usar√° para manejar la base de datos
import numpy as np #Librer√≠a para trabajar con arrays y matrices (por si acaso)
from PIL import Image
import streamlit as st

#Para personalizar nuestra p√°gina, cambiaremos la apariencia principal
st.set_page_config(
    page_title="Pel√≠culas Peruanas", #Configuramos el t√≠tulo que aparecer√° en la pesta√±a de la p√°gina (es decir, en la parte superior). En este caso, ser√° "Pel√≠culas Peruanas".
    page_icon="üé¨", #Usamos un emoji que aparecer√° junto al t√≠tulo.
    layout="wide") #Hacemos que todo el contenido de la app se extienda en la pantalla.

#Agregamos el t√≠tulo y lo centramos
st.markdown("<h1 style='text-align: center; color: #FF5733;'>Pel√≠culas Peruanas</h1>", unsafe_allow_html=True)

#Agregamos una portada en la p√°gina principal, st. image es una funci√≥n que se utiliza para mostrar im√°genes. 
st.image('Portada.png')

#Como queremos que la p√°gina tenga m√∫ltiples p√°ginas, creamos una carpeta llamada 'P√°ginas' en la que agregaremos cada una de las p√°ginas que queramos que tenga nuestra app de Streamlit.
#Cambiamos el nombre de los proyectos, por ejemplo 1_üè°_Inicio.py para la p√°gina principal y as√≠, sucesivamente

#En la p√°gina principal, agredamos un texto introductorio
texto = """
La presente p√°gina interactiva forma parte del proyecto final del curso de Pensamiento Computacional para Comunicadores de la Facultad de Ciencias y Artes de la comunicaci√≥n.
Est√° dise√±ada con el fin de explorar y analizar de manera din√°mica el cine peruano. 
Mediante esta plataforma, los usuarios pueden interactuar con datos visuales y mapas que detallan la ficha t√©cnica de la industria cinematogr√°fica peruana de entre periodo espec√≠fico (2000 - 2024).
"""
# Mostramos el texto
st.markdown(f"<div style='text-align: justify; font-size: 15px;'>{texto}</div>", unsafe_allow_html=True) 
#En este caso, y como se ver√° durante todo el proyecto, <div style='text-align: justify; font-size: 15px;'>{texto}</div>: forma parte de una cadena de c√≥digo de tipo HTML. 
# La etiqueta <div> se utiliza para agrupar contenido en HTML. En este caso, el texto est√° justificado (text-align: justify;). El tama√±o de la fuente se establece en 15 p√≠xeles (font-size: 15px;) y el texto estar√° dentro de las etiquetas <div>.

#---------------------------------------------------------------------------------------------------------------------------------------
#Recomendaciones en base a pel√≠culas similares
#Para que el usuario pueda tener una mejore experiencia en la p√°gina, la haremos interactica y lo invitaremos a seleccionar sus propias pel√≠culas, para que as√≠ el c√≥digo pueda generar recomendaciones en base a pel√≠culas similares.

#PRIMER PASO
#Mostramos y cargamos la base de datos con pandas, que ya subimos anteriormente
df=pd.read_csv("Peliculas.csv")

#SEGUNDO PASO
#Agregamos las funciones para obtener informaci√≥n de las pel√≠culas y ver la similitud seg√∫n su g√©nero
#Este c√≥digo busca en el DataFrame la pel√≠cula con el t√≠tulo indicado, luego de encontrarla, arrojar√° el enlace de este mismo. Si no la encuentra, arrojar√° el enlace de una imagen por defecto.
#Decidimos mostrar la portada peusto que permitir√° al usuario visualizar y, lo m√°s importante, conocer cada pel√≠cula.
def poster_pelicula(nombre_pelicula):
    try:
        pelicula_fila = df[df['T√≠tulo'] == nombre_pelicula]
        if not pelicula_fila.empty:
            return pelicula_fila.iloc[0]['Portada Imagen']
        else:
            return "https://via.placeholder.com/150"  # Seg√∫n la guia, esta es una imagen por defecto
    except Exception as e:
        return "https://via.placeholder.com/150"
    
#TERCER PASO
#Agregamos una funci√≥n ligada a la similitud basada en los g√©neros
#Este c√≥digo convierte los g√©neros en conjuntos para encontrar similitud entre ellos, as√≠ retornar√° la cantidad de g√©neros similares como puntuaci√≥n.
def calcular_genero_similar(pelicula_genero, genero_seleccionados):
    # Comparar similitud en g√©neros (intersecci√≥n)
    pelicula_genero = set(str(pelicula_genero).split(', '))
    genero_seleccionados = set(str(genero_seleccionados).split(', '))
    puntuacion_similar = len(pelicula_genero & genero_seleccionados)
    return puntuacion_similar

#CUARTO PASO
#Agregamos una funci√≥n para obtener recomendaciones de pel√≠culas
#Este c√≥digo busca la fila de cada pel√≠cula seleccionada y calcula la similitud con todas las dem√°s pel√≠culas para ordenarlas y luego arrojar las 5 pel√≠culas m√°s similares a estas. Cabe recalcar, que estamos excluyendo la pel√≠cula original, es decir, la seleccionada con anterioridad.
def recomendacion(pelicula):
    try:
        pelicula_fila = df[df['T√≠tulo'] == pelicula]
        if pelicula_fila.empty:
            return [], []

        pelicula_genero = pelicula_fila.iloc[0]['G√©nero']

        # Calcular similitud para cada pel√≠cula
        df['similares'] = df['G√©nero'].apply(lambda x: calcular_genero_similar(pelicula_genero, x))

        # Ordenar por similitud y seleccionar las 5 mejores (excluyendo la original)
        recomendaciones = df[df['T√≠tulo'] != pelicula].sort_values(by='similares', ascending=False).head(5)

        Peliculas_Recomendadas = recomendaciones['T√≠tulo'].tolist()
        Peliculas_Recomendadas_Poster = recomendaciones['Portada Imagen'].tolist()

        return Peliculas_Recomendadas, Peliculas_Recomendadas_Poster
    except Exception as e:
        return [], []

#QUINTO PASO
#Una vez terminada el c√≥digo, personalizamos la p√°gina
st.markdown(
    """
    <style>
    .title {
        text-align: center;
        margin-top: -70px;
        padding-top: 10px;
    }
    </style>
    """,
    unsafe_allow_html=True
)
st.title(":rainbow[Pel√≠culas Similares]")

#SEXTO PASO
#Agregamos un texto que indique de qu√© se trata el programa de 'Recomendaciones' al usuario
texto = """
Esta interfaz, te permite interactuar con la base de datos para poder proporcionarte
recomendaciones personalizadas basadas en los g√©neros de las pel√≠culas. 
¬°Disfruta de las recomendaciones con palomitas! üçø
"""
# Mostramos el texto
st.markdown(f"<div style='text-align: justify; font-size: 15px;'>{texto}</div>", unsafe_allow_html=True) 


#S√âPTIMO PASO
#Si ninguna pel√≠cula est√° seleccinada, mostraremos el men√∫ principal (selectbox)
if "movie" not in st.session_state or st.session_state.movie is None:
    option = st.selectbox('Selecciona una pel√≠cula', df['T√≠tulo'].values)
else:
    option = st.session_state.movie #Para guardar las pel√≠culs seleccionadas y mantener el estado de las interacciones

#OCTAVO PASO
#Creamos las columnas para mostrar las recomendaciones
col = st.columns(1)
#Llamamos a la funci√≥n recomendacion(option) para ver los t√≠tulos y portadas de las pel√≠culas recomendadas.
#Usamos las st.columns para organizar en 5 columnas las recomendaciones
#En cada columna, mostramos la portada con la pel√≠cula (st.image) y el t√≠tulo (st.write)
with st.container(border=True):
        name,poster = recomendacion(option)

        col1,col2,col3,col4,col5= st.columns(5, gap='medium', vertical_alignment='top')

        with col1:
            st.image(poster[0])
            st.write(name[0])

        with col2:
            st.image(poster[1])
            st.write(name[1])
            
        with col3:
            st.image(poster[2])
            st.write(name[2])
            
        with col4:
            st.image(poster[3])
            st.write(name[3])
            
        with col5:
            st.image(poster[4])    
            st.write(name[4])
unsafe_allow_html=True
